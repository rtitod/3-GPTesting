from django.shortcuts import render
from django.http import JsonResponse
import random
import openai
import socket
import subprocess
import time

from django.views.decorators.csrf import csrf_exempt

from .models import Mensaje, Linea_Comando, Registro_IP

openai.api_key = "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"
messages = [{"role": "system",
               "content": "Tu eres un asistente experto en seguridad informática y pentesting."},
            {"role": "user", "content": "¿Cuál es tu nombre?"}
            ]
messages_report_expert = [{"role": "system",
               "content": "Tu eres un asistente experto en seguridad informática y pentesting. Vas a interpretar cada fragmento de texto que te pase"},
            {"role": "user", "content": "¿Cuál es tu nombre?"}
            ]
messages_report_expert_detailed = [{"role": "system",
               "content": "Tu eres un asistente experto en seguridad informática y pentesting. Vas a interpretar de forma detallada cada texto que te pase"},
            {"role": "user", "content": "¿Cuál es tu nombre?"}
            ]
modelo = "gpt-3.5-turbo"
#modelo = "gpt-4"
nombre_defecto="3GPTesting"
empresa_defecto="ACME"

def enviar_mensaje(request):
    if request.method == 'POST':
        contenido = request.POST.get('contenido')
        #is a command?
        firstchar = contenido[0]
        if firstchar == "\\":
            comando = contenido.split()
            if comando[0] == "\\add_cmd":
                if len(comando) >= 3:
                    existeip = False
                    for i in range(2, len(comando)):
                        if "$ip" in comando[i]:
                            existeip = True
                    if existeip:
                        existecomando = Linea_Comando.objects.filter(comando=comando[1])
                        if not existecomando:
                            comando[2] = ' '.join(comando[2:])
                            Linea_Comando.objects.create(comando=comando[1],parametros=comando[2])
                            response_content = "Comando añadido correctamente"
                        else:
                            response_content = "El comando ya existe en la base de datos"
                    else:
                        response_content = "No existe el parámetro $ip"
                else:
                    response_content = "Faltan argumentos (tienen que ser dos)"
            elif comando[0] == "\\del_cmd":
                if len(comando) == 2:
                    objetos_a_eliminar = Linea_Comando.objects.filter(comando=comando[1])
                    if objetos_a_eliminar:
                        objetos_a_eliminar.delete()
                        response_content = "Comando borrado correctamente"
                    else:
                        response_content = "No existe ese comando para editar"
                else:
                    response_content = "Error en la cantidad de argumentos (tiene que ser uno)"
            elif comando[0] == "\\edit_cmd":
                if len(comando) >= 3:
                    existeip = False
                    for i in range(2, len(comando)):
                        if "$ip" in comando[i]:
                            existeip = True
                    if existeip:
                        existecomando = Linea_Comando.objects.filter(comando=comando[1])
                        if existecomando:
                            comando[2] = ' '.join(comando[2:])
                            existecomando.delete()
                            Linea_Comando.objects.create(comando=comando[1],parametros=comando[2])
                            response_content = "Comando editado correctamente"
                        else:
                            response_content = "El comando no existe en la base de datos"
                    else:
                        response_content = "No existe el parámetro $ip"
                else:
                    response_content = "Faltan argumentos (tienen que ser dos)"
            elif comando[0] == "\\list_cmd":
                if len(comando) == 1:
                    objetos_linea_comando = Linea_Comando.objects.all()
                    if objetos_linea_comando.exists():
                        tabla_html = "<table class=\"table_commands\">"
                        tabla_html += "<tr><th>Comando</th><th>Parámetros</th></tr>"

                        for objeto in objetos_linea_comando:
                            obj_comando = objeto.comando
                            obj_parametros = objeto.parametros
                            tabla_html += f"<tr><td>{obj_comando}</td><td>{obj_parametros}</td></tr>"
                        tabla_html += "</table>"
                        response_content = tabla_html
                    else:
                        response_content = "No existen elementos en la tabla lineas de comandos"
                else:
                    response_content = "Error en la cantidad de argumentos (tiene que ser cero)"       
            
            elif comando[0] == "\\scan":
                if len(comando) == 2:
                    objetos_linea_comando = Linea_Comando.objects.all()
                    if objetos_linea_comando.exists():
                        if es_ip_o_host_valido(comando[1]):
                            registro_ip = Registro_IP.objects.create(IP=comando[1],empresa=empresa_defecto,nombre=nombre_defecto)
                            for i, objeto in enumerate(objetos_linea_comando, start=1):
                                parametros_modificados = objeto.parametros.replace("$ip", comando[1])
                                linea_de_comando = objeto.comando + ' ' + parametros_modificados
                                salida = ejecutar_comando(linea_de_comando)
                                salida = "[" + linea_de_comando + "]:\n" + salida
                                setattr(registro_ip, f"contenedor{i}", salida)
                                messages_report_expert[-1]["content"] = salida
                                respuesta = get_model_response(messages_report_expert, salida)
                                setattr(registro_ip, f"respuesta{i}", respuesta)
                                time.sleep(2)
                            registro_ip.save()
                            response_content = "El escaneo a la dirección: " + comando[1] + " ha sido completado."
                        else:
                            response_content = "La ip o host no es válido al parecer"
                    else:
                        response_content = "No existen elementos en la tabla"
                else:
                    response_content = "Error en la cantidad de argumentos (tiene que ser uno)"
            elif comando[0] == "\\list":
                if len(comando) == 1:
                    objetos_registro_ip = Registro_IP.objects.all()
                    if objetos_registro_ip.exists():
                        tabla_html = "<table class=\"table_scans\">"
                        tabla_html += "<tr><th>ID</th><th>Host</th><th>Fecha</th><th>Experto</th><th>Empresa</th></tr>"

                        for objeto in objetos_registro_ip:
                            obj_id = objeto.id
                            obj_host = objeto.IP
                            obj_fecha = objeto.fecha
                            obj_experto = objeto.nombre
                            obj_empresa = objeto.empresa
                            tabla_html += f"<tr><td>{obj_id}</td><td>{obj_host}</td><td>{obj_fecha}</td><td>{obj_experto}</td><td>{obj_empresa}</td></tr>"
                        tabla_html += "</table>"
                        response_content = tabla_html
                    else:
                        response_content = "No existen elementos en la tabla registros"
                else:
                    response_content = "Error en la cantidad de argumentos (tiene que ser cero)"
            elif comando[0] == "\\add":
                if len(comando) >= 4:
                    if comando[2].startswith("[") and comando[2].endswith("]"):
                        try:
                            id_a_buscar = int(comando[1]) 
                        except ValueError:
                            response_content = "No se encontró un objeto con ID " + comando[1]
                        else:
                            try:
                                objeto = Registro_IP.objects.get(id=id_a_buscar)
                            except Registro_IP.DoesNotExist:
                                response_content = "No se encontró un objeto con ID " + str(id_a_buscar)
                            else:
                                contenedor_atributos = [nombre_atributo for nombre_atributo in dir(objeto) if nombre_atributo.startswith("contenedor")]
                                contenedor_atributos_ordenados = sorted(contenedor_atributos, key=lambda x: int(x.lstrip("contenedor")))
                                contenedor_vacio_encontrado = False
                                for atributo in contenedor_atributos_ordenados:
                                    if not getattr(objeto, atributo):
                                        comando[3] = ' '.join(comando[3:])
                                        salida = comando[2] + ":\n" + comando[3]
                                        setattr(objeto, atributo, salida)
                                        messages_report_expert[-1]["content"] = salida
                                        respuesta = get_model_response(messages_report_expert, salida)
                                        numero = atributo.lstrip("contenedor")
                                        setattr(objeto, "respuesta" + numero, respuesta)
                                        objeto.save()
                                        response_content = "La información ha sido añadida correctamente"
                                        contenedor_vacio_encontrado = True
                                        break
                                if not contenedor_vacio_encontrado:
                                    response_content = "No se encontró algún contenedor de información vacío"
                    else:
                        response_content = "El parametro \"linea de comandos\" no cumple con estar delimitado por: [ ]" 
                else:
                    response_content = "Error en la cantidad de argumentos (tienen que ser tres)" 
            elif comando[0] == "\\print":
                response_content = "WIP\n"
            elif comando[0] == "\\name":
                if len(comando) >= 3:
                    try:
                        id_a_buscar = int(comando[1])  
                    except ValueError:
                        response_content = "No se encontró un objeto con ID " + comando[1]
                    else:
                        try:
                            objeto = Registro_IP.objects.get(id=id_a_buscar)
                        except Registro_IP.DoesNotExist:
                            response_content = "No se encontró un objeto con ID " + str(id_a_buscar)
                        else:
                            comando[2] = ' '.join(comando[2:])
                            objeto.nombre = comando[2]
                            objeto.save()
                            response_content = "El campo 'nombre' del objeto con ID " + str(id_a_buscar) + " ha sido modificado a " + comando[2]
                else:
                    response_content = "Error en la cantidad de argumentos (tienen que ser dos)"   
            elif comando[0] == "\\company":
                if len(comando) >= 3:
                    try:
                        id_a_buscar = int(comando[1]) 
                    except ValueError:
                        response_content = "No se encontró un objeto con ID " + comando[1]
                    else:
                        try:
                            objeto = Registro_IP.objects.get(id=id_a_buscar)
                        except Registro_IP.DoesNotExist:
                            response_content = "No se encontró un objeto con ID " + str(id_a_buscar)
                        else:
                            comando[2] = ' '.join(comando[2:])
                            objeto.empresa = comando[2]
                            objeto.save()
                            response_content = "El campo 'empresa' del objeto con ID " + str(id_a_buscar) + " ha sido modificado a " + comando[2]
                else:
                    response_content = "Error en la cantidad de argumentos (tienen que ser dos)"   
            elif comando[0] == "\\result":
                if len(comando) == 2:
                    try:
                        id_a_buscar = int(comando[1]) 
                    except ValueError:
                        response_content = "No se encontró un objeto con ID " + comando[1]
                    else:
                        try:
                            objeto = Registro_IP.objects.get(id=id_a_buscar)
                        except Registro_IP.DoesNotExist:
                            response_content = "No se encontró un objeto con ID " + str(id_a_buscar)
                        else:
                            respuesta_atributos = [nombre_atributo for nombre_atributo in dir(objeto) if nombre_atributo.startswith("respuesta")]
                            respuesta_atributos_ordenados = sorted(respuesta_atributos, key=lambda x: int(x.lstrip("respuesta")))
                            existe_contenedor_lleno = False
                            for atributo in respuesta_atributos_ordenados:
                                if getattr(objeto, atributo):
                                    messages_report_expert_detailed[-1]["content"] = getattr(objeto, atributo)
                                    get_model_response(messages_report_expert_detailed, getattr(objeto, atributo))
                                    time.sleep(5)
                                    existe_contenedor_lleno = True
                            if existe_contenedor_lleno == True:
                                messages_report_expert_detailed[-1]["content"] = "Cuál es tu interpretación como experto de todo el texto introducido previamente?"
                                resultado = get_model_response(messages_report_expert_detailed, "Cuál es tu interpretación como experto de todo el texto introducido previamente?")
                                setattr(objeto, "resultado", resultado)
                                time.sleep(5)
                                messages_report_expert_detailed[-1]["content"] = "resume tu interpretacion en menos de 350 letras"
                                resumen = get_model_response(messages_report_expert_detailed, "resume este texto en menos de 300 letras")
                                setattr(objeto, "resumen", resumen)
                                time.sleep(5)
                                messages_report_expert_detailed[-1]["content"] = "dame recomendaciones de seguridad informática en base a todo lo que me dijistes"
                                recomendaciones = get_model_response(messages_report_expert_detailed, "dame recomendaciones de seguridad informática en base a todo lo que me dijistes")
                                setattr(objeto, "recomendaciones", recomendaciones)
                                time.sleep(5)
                                objeto.save()
                                response_content = "Se analizaron las respuestas y se guardaron el resultado, el resumen y las recomendaciones."
                            else:
                                response_content = "Todos los contenedores están vacíos"
                else:
                    response_content = "Error en la cantidad de argumentos (tiene que ser uno)" 
            elif comando[0] == "\\clear":
                response_content = "Limpiando...\n"
                Mensaje.objects.all().delete()
            elif comando[0] == "\\help":
                response_content = "WIP\n"
            else:
                response_content = "Comando no reconocido"
        else:
            messages[-1]["content"] = contenido
            response_content = get_model_response(messages, contenido)
        contenido = contenido.replace('\n', '<br>')
        response_content = response_content.replace('\n', '<br>')
        mensaje = Mensaje.objects.create(contenido=contenido,respuesta=response_content)
        return JsonResponse({'mensaje': mensaje.contenido, 
                             'respuesta': mensaje.respuesta, 
                             'fecha': mensaje.fecha.strftime('%Y-%m-%d %H:%M:%S')})

def recuperar_mensajes(request):
    mensajes = Mensaje.objects.all()
    data = [{'mensaje': mensaje.contenido,
             'respuesta': mensaje.respuesta,
             'fecha': mensaje.fecha.strftime('%Y-%m-%d %H:%M:%S')} for mensaje in mensajes]
    return JsonResponse(data, safe=False)

def index(request):
    return render(request, 'frontend/index.html')

def es_ip_o_host_valido(cadena):
    try:
        socket.inet_aton(cadena)
        return True
    except socket.error:
        try:
            socket.gethostbyname(cadena)
            return True
        except socket.gaierror:
            return False
        
def ejecutar_comando(comando_str):
    try:
        comando = comando_str.split()
        resultado = subprocess.check_output(comando, stderr=subprocess.STDOUT, text=True)
        return resultado
    except subprocess.CalledProcessError as e:
        return f"El comando no existe o se produjo un error: \n {e.output}"
    except Exception as e:
        return f"Ocurrió un error inesperado: \n {str(e)}"

def get_model_response(conversation, user_message):
    conversation.append({"role": "user", "content": user_message})
    response = openai.ChatCompletion.create(
        model=modelo,
        messages=conversation
    )
    return response['choices'][0]['message']['content']
